/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.

> Note: For any endpoints not listed you can follow the
[reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576)
guide to figure out how to use an API endpoint.

### Request Content-Type

The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`,
`multipart/form-data`, or `application/json`.

### Endpoint Names and Response Content-Type

Most API endpoints provide the same content as their HTML counterparts. For example
the URL `/categories` serves a list of categories, the `/categories.json` API provides the
same information in JSON format.

Instead of sending API requests to `/categories.json` you may also send them to `/categories`
and add an `Accept: application/json` header to the request to get the JSON response.
Sending requests with the `Accept` header is necessary if you want to use URLs
for related endpoints returned by the API, such as pagination URLs.
These URLs are returned without the `.json` prefix so you need to add the header in
order to get the correct response format.

### Authentication

Some endpoints do not require any authentication, pretty much anything else will
require you to be authenticated.

To become authenticated you will need to create an API Key from the admin panel.

Once you have your API Key you can pass it in along with your API Username
as an HTTP header like this:

```
curl -X GET "http://127.0.0.1:3000/admin/users/list/active.json" \
-H "Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19" \
-H "Api-Username: system"
```

and this is how POST requests will look:

```
curl -X POST "http://127.0.0.1:3000/categories" \
-H "Content-Type: multipart/form-data;" \
-H "Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19" \
-H "Api-Username: system" \
-F "name=89853c20-4409-e91a-a8ea-f6cdff96aaaa" \
-F "color=49d9e9" \
-F "text_color=f0fcfd"
```

### Boolean values

If an endpoint accepts a boolean be sure to specify it as a lowercase
`true` or `false` value unless noted otherwise.

 * OpenAPI spec version: latest
 */
import axios from 'axios';
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  AbortMultipart200,
  AbortMultipartBody,
  ActivateUser200,
  AddGroupMembers200,
  AddGroupMembersBody,
  AdminGetUser200,
  AdminListBadges200,
  AdminListUsers200Item,
  AdminListUsersParams,
  AnonymizeUser200,
  BatchPresignMultipartParts200,
  BatchPresignMultipartPartsBody,
  ChangePasswordBody,
  CompleteExternalUpload200,
  CompleteExternalUploadBody,
  CompleteMultipart200,
  CompleteMultipartBody,
  CreateBackup200,
  CreateBackupBody,
  CreateBadge200,
  CreateBadgeBody,
  CreateCategory200,
  CreateCategoryBody,
  CreateGroup200,
  CreateGroupBody,
  CreateInvite200,
  CreateInviteBody,
  CreateMultipartUpload200,
  CreateMultipartUploadBody,
  CreateMultipleInvites200,
  CreateMultipleInvitesBody,
  CreateTagGroup200,
  CreateTagGroupBody,
  CreateTopicPostPM200,
  CreateTopicPostPMBody,
  CreateTopicTimer200,
  CreateTopicTimerBody,
  CreateUpload200,
  CreateUploadBody,
  CreateUser200,
  CreateUserBody,
  DeactivateUser200,
  DeleteGroup200,
  DeletePostBody,
  DeleteUser200,
  DeleteUserBody,
  DownloadBackupParams,
  GeneratePresignedPut200,
  GeneratePresignedPutBody,
  GetBackups200Item,
  GetCategory200,
  GetGroup200,
  GetNotifications200,
  GetPost200,
  GetSite200,
  GetSiteBasicInfo200,
  GetSpecificPostsFromTopic200,
  GetSpecificPostsFromTopicBody,
  GetTag200,
  GetTagGroup200,
  GetTopic200,
  GetUser200,
  GetUserEmails200,
  GetUserExternalId200,
  GetUserIdentiyProviderExternalId200,
  GetUserSentPrivateMessages200,
  InviteGroupToTopic200,
  InviteGroupToTopicBody,
  InviteToTopic200,
  InviteToTopicBody,
  ListCategories200,
  ListCategoriesParams,
  ListCategoryTopics200,
  ListGroupMembers200,
  ListGroups200,
  ListLatestTopics200,
  ListLatestTopicsParams,
  ListPosts200,
  ListPostsParams,
  ListTagGroups200,
  ListTags200,
  ListTopTopics200,
  ListTopTopicsParams,
  ListUserActions200,
  ListUserActionsParams,
  ListUserBadges200,
  ListUserPrivateMessages200,
  ListUsersPublic200,
  ListUsersPublicParams,
  LockPost200,
  LockPostBody,
  LogOutUser200,
  MarkNotificationsAsRead200,
  MarkNotificationsAsReadBody,
  PerformPostAction200,
  PerformPostActionBody,
  PostReplies200Item,
  RefreshGravatar200,
  RemoveGroupMembers200,
  RemoveGroupMembersBody,
  Search200,
  SearchParams,
  SendPasswordResetEmail200,
  SendPasswordResetEmailBody,
  SetNotificationLevel200,
  SetNotificationLevelBody,
  SilenceUser200,
  SilenceUserBody,
  SuspendUser200,
  SuspendUserBody,
  UpdateAvatar200,
  UpdateAvatarBody,
  UpdateBadge200,
  UpdateBadgeBody,
  UpdateCategory200,
  UpdateCategoryBody,
  UpdateEmailBody,
  UpdateGroup200,
  UpdateGroupBody,
  UpdatePost200,
  UpdatePostBody,
  UpdateTagGroup200,
  UpdateTagGroupBody,
  UpdateTopic200,
  UpdateTopicBody,
  UpdateTopicStatus200,
  UpdateTopicStatusBody,
  UpdateTopicTimestamp200,
  UpdateTopicTimestampBody,
  UpdateUser200,
  UpdateUserBody,
  UpdateUsernameBody
} from './discourseAPI/schemas';

export const getDiscourseAPIDocumentation = () => {
/**
 * @summary List backups
 */
const getBackups = <TData = AxiosResponse<GetBackups200Item[]>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/admin/backups.json`,options
    );
  }

/**
 * @summary Create backup
 */
const createBackup = <TData = AxiosResponse<CreateBackup200>>(
    createBackupBody: CreateBackupBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/admin/backups.json`,
      createBackupBody,options
    );
  }

/**
 * @summary Send download backup email
 */
const sendDownloadBackupEmail = <TData = AxiosResponse<void>>(
    filename: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/admin/backups/${filename}`,undefined,options
    );
  }

/**
 * @summary Download backup
 */
const downloadBackup = <TData = AxiosResponse<void>>(
    filename: string,
    params: DownloadBackupParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/admin/backups/${filename}`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary List badges
 */
const adminListBadges = <TData = AxiosResponse<AdminListBadges200>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/admin/badges.json`,options
    );
  }

/**
 * @summary Create badge
 */
const createBadge = <TData = AxiosResponse<CreateBadge200>>(
    createBadgeBody: CreateBadgeBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/admin/badges.json`,
      createBadgeBody,options
    );
  }

/**
 * @summary Update badge
 */
const updateBadge = <TData = AxiosResponse<UpdateBadge200>>(
    id: number,
    updateBadgeBody: UpdateBadgeBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/admin/badges/${id}.json`,
      updateBadgeBody,options
    );
  }

/**
 * @summary Delete badge
 */
const deleteBadge = <TData = AxiosResponse<void>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/admin/badges/${id}.json`,options
    );
  }

/**
 * @summary Creates a category
 */
const createCategory = <TData = AxiosResponse<CreateCategory200>>(
    createCategoryBody: CreateCategoryBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/categories.json`,
      createCategoryBody,options
    );
  }

/**
 * @summary Retrieves a list of categories
 */
const listCategories = <TData = AxiosResponse<ListCategories200>>(
    params?: ListCategoriesParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/categories.json`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Updates a category
 */
const updateCategory = <TData = AxiosResponse<UpdateCategory200>>(
    id: number,
    updateCategoryBody: UpdateCategoryBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/categories/${id}.json`,
      updateCategoryBody,options
    );
  }

/**
 * @summary List topics
 */
const listCategoryTopics = <TData = AxiosResponse<ListCategoryTopics200>>(
    slug: string,
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/c/${slug}/${id}.json`,options
    );
  }

/**
 * @summary Show category
 */
const getCategory = <TData = AxiosResponse<GetCategory200>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/c/${id}/show.json`,options
    );
  }

/**
 * @summary Create a group
 */
const createGroup = <TData = AxiosResponse<CreateGroup200>>(
    createGroupBody: CreateGroupBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/admin/groups.json`,
      createGroupBody,options
    );
  }

/**
 * @summary Delete a group
 */
const deleteGroup = <TData = AxiosResponse<DeleteGroup200>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/admin/groups/${id}.json`,options
    );
  }

/**
 * @summary Update a group
 */
const updateGroup = <TData = AxiosResponse<UpdateGroup200>>(
    id: number,
    updateGroupBody: UpdateGroupBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/groups/${id}.json`,
      updateGroupBody,options
    );
  }

/**
 * @summary Get a group
 */
const getGroup = <TData = AxiosResponse<GetGroup200>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/groups/${id}.json`,options
    );
  }

/**
 * @summary List group members
 */
const listGroupMembers = <TData = AxiosResponse<ListGroupMembers200>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/groups/${id}/members.json`,options
    );
  }

/**
 * @summary Add group members
 */
const addGroupMembers = <TData = AxiosResponse<AddGroupMembers200>>(
    id: number,
    addGroupMembersBody: AddGroupMembersBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/groups/${id}/members.json`,
      addGroupMembersBody,options
    );
  }

/**
 * @summary Remove group members
 */
const removeGroupMembers = <TData = AxiosResponse<RemoveGroupMembers200>>(
    id: number,
    removeGroupMembersBody: RemoveGroupMembersBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/groups/${id}/members.json`,{data:
      removeGroupMembersBody, ...options}
    );
  }

/**
 * @summary List groups
 */
const listGroups = <TData = AxiosResponse<ListGroups200>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/groups.json`,options
    );
  }

/**
 * @summary Create an invite
 */
const createInvite = <TData = AxiosResponse<CreateInvite200>>(
    createInviteBody: CreateInviteBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/invites.json`,
      createInviteBody,options
    );
  }

/**
 * @summary Create multiple invites
 */
const createMultipleInvites = <TData = AxiosResponse<CreateMultipleInvites200>>(
    createMultipleInvitesBody: CreateMultipleInvitesBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/invites/create-multiple.json`,
      createMultipleInvitesBody,options
    );
  }

/**
 * @summary Get the notifications that belong to the current user
 */
const getNotifications = <TData = AxiosResponse<GetNotifications200>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/notifications.json`,options
    );
  }

/**
 * @summary Mark notifications as read
 */
const markNotificationsAsRead = <TData = AxiosResponse<MarkNotificationsAsRead200>>(
    markNotificationsAsReadBody: MarkNotificationsAsReadBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/notifications/mark-read.json`,
      markNotificationsAsReadBody,options
    );
  }

/**
 * @summary List latest posts across topics
 */
const listPosts = <TData = AxiosResponse<ListPosts200>>(
    params?: ListPostsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/posts.json`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Creates a new topic, a new post, or a private message
 */
const createTopicPostPM = <TData = AxiosResponse<CreateTopicPostPM200>>(
    createTopicPostPMBody: CreateTopicPostPMBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/posts.json`,
      createTopicPostPMBody,options
    );
  }

/**
 * This endpoint can be used to get the number of likes on a post using the
`actions_summary` property in the response. `actions_summary` responses
with the id of `2` signify a `like`. If there are no `actions_summary`
items with the id of `2`, that means there are 0 likes. Other ids likely
refer to various different flag types.

 * @summary Retrieve a single post
 */
const getPost = <TData = AxiosResponse<GetPost200>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/posts/${id}.json`,options
    );
  }

/**
 * @summary Update a single post
 */
const updatePost = <TData = AxiosResponse<UpdatePost200>>(
    id: string,
    updatePostBody: UpdatePostBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/posts/${id}.json`,
      updatePostBody,options
    );
  }

/**
 * @summary delete a single post
 */
const deletePost = <TData = AxiosResponse<void>>(
    id: number,
    deletePostBody: DeletePostBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/posts/${id}.json`,{data:
      deletePostBody, ...options}
    );
  }

/**
 * @summary List replies to a post
 */
const postReplies = <TData = AxiosResponse<PostReplies200Item[]>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/posts/${id}/replies.json`,options
    );
  }

/**
 * @summary Lock a post from being edited
 */
const lockPost = <TData = AxiosResponse<LockPost200>>(
    id: string,
    lockPostBody: LockPostBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/posts/${id}/locked.json`,
      lockPostBody,options
    );
  }

/**
 * @summary Like a post and other actions
 */
const performPostAction = <TData = AxiosResponse<PerformPostAction200>>(
    performPostActionBody: PerformPostActionBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/post_actions.json`,
      performPostActionBody,options
    );
  }

/**
 * @summary Get a list of private messages for a user
 */
const listUserPrivateMessages = <TData = AxiosResponse<ListUserPrivateMessages200>>(
    username: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/topics/private-messages/${username}.json`,options
    );
  }

/**
 * @summary Get a list of private messages sent for a user
 */
const getUserSentPrivateMessages = <TData = AxiosResponse<GetUserSentPrivateMessages200>>(
    username: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/topics/private-messages-sent/${username}.json`,options
    );
  }

/**
 * @summary Search for a term
 */
const search = <TData = AxiosResponse<Search200>>(
    params?: SearchParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/search.json`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * Can be used to fetch all categories and subcategories
 * @summary Get site info
 */
const getSite = <TData = AxiosResponse<GetSite200>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/site.json`,options
    );
  }

/**
 * Can be used to fetch basic info about a site
 * @summary Get site basic info
 */
const getSiteBasicInfo = <TData = AxiosResponse<GetSiteBasicInfo200>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/site/basic-info.json`,options
    );
  }

/**
 * @summary Get a list of tag groups
 */
const listTagGroups = <TData = AxiosResponse<ListTagGroups200>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/tag_groups.json`,options
    );
  }

/**
 * @summary Creates a tag group
 */
const createTagGroup = <TData = AxiosResponse<CreateTagGroup200>>(
    createTagGroupBody: CreateTagGroupBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/tag_groups.json`,
      createTagGroupBody,options
    );
  }

/**
 * @summary Get a single tag group
 */
const getTagGroup = <TData = AxiosResponse<GetTagGroup200>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/tag_groups/${id}.json`,options
    );
  }

/**
 * @summary Update tag group
 */
const updateTagGroup = <TData = AxiosResponse<UpdateTagGroup200>>(
    id: string,
    updateTagGroupBody: UpdateTagGroupBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/tag_groups/${id}.json`,
      updateTagGroupBody,options
    );
  }

/**
 * @summary Get a list of tags
 */
const listTags = <TData = AxiosResponse<ListTags200>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/tags.json`,options
    );
  }

/**
 * @summary Get a specific tag
 */
const getTag = <TData = AxiosResponse<GetTag200>>(
    name: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/tag/${name}.json`,options
    );
  }

/**
 * @summary Get specific posts from a topic
 */
const getSpecificPostsFromTopic = <TData = AxiosResponse<GetSpecificPostsFromTopic200>>(
    id: string,
    getSpecificPostsFromTopicBody: GetSpecificPostsFromTopicBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/t/${id}/posts.json`,options
    );
  }

/**
 * @summary Get a single topic
 */
const getTopic = <TData = AxiosResponse<GetTopic200>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/t/${id}.json`,options
    );
  }

/**
 * @summary Remove a topic
 */
const removeTopic = <TData = AxiosResponse<void>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/t/${id}.json`,options
    );
  }

/**
 * @summary Update a topic
 */
const updateTopic = <TData = AxiosResponse<UpdateTopic200>>(
    id: string,
    updateTopicBody: UpdateTopicBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/t/-/${id}.json`,
      updateTopicBody,options
    );
  }

/**
 * @summary Invite to topic
 */
const inviteToTopic = <TData = AxiosResponse<InviteToTopic200>>(
    id: string,
    inviteToTopicBody: InviteToTopicBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/t/${id}/invite.json`,
      inviteToTopicBody,options
    );
  }

/**
 * @summary Invite group to topic
 */
const inviteGroupToTopic = <TData = AxiosResponse<InviteGroupToTopic200>>(
    id: string,
    inviteGroupToTopicBody: InviteGroupToTopicBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/t/${id}/invite-group.json`,
      inviteGroupToTopicBody,options
    );
  }

/**
 * @summary Bookmark topic
 */
const bookmarkTopic = <TData = AxiosResponse<void>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/t/${id}/bookmark.json`,undefined,options
    );
  }

/**
 * @summary Update the status of a topic
 */
const updateTopicStatus = <TData = AxiosResponse<UpdateTopicStatus200>>(
    id: string,
    updateTopicStatusBody: UpdateTopicStatusBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/t/${id}/status.json`,
      updateTopicStatusBody,options
    );
  }

/**
 * @summary Get the latest topics
 */
const listLatestTopics = <TData = AxiosResponse<ListLatestTopics200>>(
    params?: ListLatestTopicsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/latest.json`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Get the top topics filtered by period
 */
const listTopTopics = <TData = AxiosResponse<ListTopTopics200>>(
    params?: ListTopTopicsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/top.json`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Set notification level
 */
const setNotificationLevel = <TData = AxiosResponse<SetNotificationLevel200>>(
    id: string,
    setNotificationLevelBody: SetNotificationLevelBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/t/${id}/notifications.json`,
      setNotificationLevelBody,options
    );
  }

/**
 * @summary Update topic timestamp
 */
const updateTopicTimestamp = <TData = AxiosResponse<UpdateTopicTimestamp200>>(
    id: string,
    updateTopicTimestampBody: UpdateTopicTimestampBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/t/${id}/change-timestamp.json`,
      updateTopicTimestampBody,options
    );
  }

/**
 * @summary Create topic timer
 */
const createTopicTimer = <TData = AxiosResponse<CreateTopicTimer200>>(
    id: string,
    createTopicTimerBody: CreateTopicTimerBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/t/${id}/timer.json`,
      createTopicTimerBody,options
    );
  }

/**
 * @summary Get topic by external_id
 */
const getTopicByExternalId = <TData = AxiosResponse<unknown>>(
    externalId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/t/external_id/${externalId}.json`,options
    );
  }

/**
 * @summary Creates an upload
 */
const createUpload = <TData = AxiosResponse<CreateUpload200>>(
    createUploadBody: CreateUploadBody, options?: AxiosRequestConfig
 ): Promise<TData> => {const formData = new FormData();
formData.append('data', createUploadBody)

    return axios.post(
      `/uploads.json`,
      formData,options
    );
  }

/**
 * Direct external uploads bypass the usual method of creating uploads
via the POST /uploads route, and upload directly to an external provider,
which by default is S3. This route begins the process, and will return
a unique identifier for the external upload as well as a presigned URL
which is where the file binary blob should be uploaded to.

Once the upload is complete to the external service, you must call the
POST /complete-external-upload route using the unique identifier returned
by this route, which will create any required Upload record in the Discourse
database and also move file from its temporary location to the final
destination in the external storage service.

You must have the correct permissions and CORS settings configured in your
external provider. We support AWS S3 as the default. See:

https://meta.discourse.org/t/-/210469#s3-multipart-direct-uploads-4.

An external file store must be set up and `enable_direct_s3_uploads` must
be set to true for this endpoint to function.


 * @summary Initiates a direct external upload
 */
const generatePresignedPut = <TData = AxiosResponse<GeneratePresignedPut200>>(
    generatePresignedPutBody: GeneratePresignedPutBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/uploads/generate-presigned-put.json`,
      generatePresignedPutBody,options
    );
  }

/**
 * Completes an external upload initialized with /get-presigned-put. The
file will be moved from its temporary location in external storage to
a final destination in the S3 bucket. An Upload record will also be
created in the database in most cases.

If a sha1-checksum was provided in the initial request it will also
be compared with the uploaded file in storage to make sure the same
file was uploaded. The file size will be compared for the same reason.

You must have the correct permissions and CORS settings configured in your
external provider. We support AWS S3 as the default. See:

https://meta.discourse.org/t/-/210469#s3-multipart-direct-uploads-4.

An external file store must be set up and `enable_direct_s3_uploads` must
be set to true for this endpoint to function.


 * @summary Completes a direct external upload
 */
const completeExternalUpload = <TData = AxiosResponse<CompleteExternalUpload200>>(
    completeExternalUploadBody: CompleteExternalUploadBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/uploads/complete-external-upload.json`,
      completeExternalUploadBody,options
    );
  }

/**
 * Creates a multipart upload in the external storage provider, storing
a temporary reference to the external upload similar to /get-presigned-put.

You must have the correct permissions and CORS settings configured in your
external provider. We support AWS S3 as the default. See:

https://meta.discourse.org/t/-/210469#s3-multipart-direct-uploads-4.

An external file store must be set up and `enable_direct_s3_uploads` must
be set to true for this endpoint to function.


 * @summary Creates a multipart external upload
 */
const createMultipartUpload = <TData = AxiosResponse<CreateMultipartUpload200>>(
    createMultipartUploadBody: CreateMultipartUploadBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/uploads/create-multipart.json`,
      createMultipartUploadBody,options
    );
  }

/**
 * Multipart uploads are uploaded in chunks or parts to individual presigned
URLs, similar to the one generated by /generate-presigned-put. The part
numbers provided must be between 1 and 10000. The total number of parts
will depend on the chunk size in bytes that you intend to use to upload
each chunk. For example a 12MB file may have 2 5MB chunks and a final
2MB chunk, for part numbers 1, 2, and 3.

This endpoint will return a presigned URL for each part number provided,
which you can then use to send PUT requests for the binary chunk corresponding
to that part. When the part is uploaded, the provider should return an
ETag for the part, and this should be stored along with the part number,
because this is needed to complete the multipart upload.

You must have the correct permissions and CORS settings configured in your
external provider. We support AWS S3 as the default. See:

https://meta.discourse.org/t/-/210469#s3-multipart-direct-uploads-4.

An external file store must be set up and `enable_direct_s3_uploads` must
be set to true for this endpoint to function.


 * @summary Generates batches of presigned URLs for multipart parts
 */
const batchPresignMultipartParts = <TData = AxiosResponse<BatchPresignMultipartParts200>>(
    batchPresignMultipartPartsBody: BatchPresignMultipartPartsBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/uploads/batch-presign-multipart-parts.json`,
      batchPresignMultipartPartsBody,options
    );
  }

/**
 * This endpoint aborts the multipart upload initiated with /create-multipart.
This should be used when cancelling the upload. It does not matter if parts
were already uploaded into the external storage provider.

You must have the correct permissions and CORS settings configured in your
external provider. We support AWS S3 as the default. See:

https://meta.discourse.org/t/-/210469#s3-multipart-direct-uploads-4.

An external file store must be set up and `enable_direct_s3_uploads` must
be set to true for this endpoint to function.


 * @summary Abort multipart upload
 */
const abortMultipart = <TData = AxiosResponse<AbortMultipart200>>(
    abortMultipartBody: AbortMultipartBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/uploads/abort-multipart.json`,
      abortMultipartBody,options
    );
  }

/**
 * Completes the multipart upload in the external store, and copies the
file from its temporary location to its final location in the store.
All of the parts must have been uploaded to the external storage provider.
An Upload record will be completed in most cases once the file is copied
to its final location.

You must have the correct permissions and CORS settings configured in your
external provider. We support AWS S3 as the default. See:

https://meta.discourse.org/t/-/210469#s3-multipart-direct-uploads-4.

An external file store must be set up and `enable_direct_s3_uploads` must
be set to true for this endpoint to function.


 * @summary Complete multipart upload
 */
const completeMultipart = <TData = AxiosResponse<CompleteMultipart200>>(
    completeMultipartBody: CompleteMultipartBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/uploads/complete-multipart.json`,
      completeMultipartBody,options
    );
  }

/**
 * @summary List badges for a user
 */
const listUserBadges = <TData = AxiosResponse<ListUserBadges200>>(
    username: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/user-badges/${username}.json`,options
    );
  }

/**
 * @summary Creates a user
 */
const createUser = <TData = AxiosResponse<CreateUser200>>(
    createUserBody: CreateUserBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/users.json`,
      createUserBody,options
    );
  }

/**
 * @summary Get a single user by username
 */
const getUser = <TData = AxiosResponse<GetUser200>>(
    username: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/u/${username}.json`,options
    );
  }

/**
 * @summary Update a user
 */
const updateUser = <TData = AxiosResponse<UpdateUser200>>(
    username: string,
    updateUserBody: UpdateUserBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/u/${username}.json`,
      updateUserBody,options
    );
  }

/**
 * @summary Get a user by external_id
 */
const getUserExternalId = <TData = AxiosResponse<GetUserExternalId200>>(
    externalId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/u/by-external/${externalId}.json`,options
    );
  }

/**
 * @summary Get a user by identity provider external ID
 */
const getUserIdentiyProviderExternalId = <TData = AxiosResponse<GetUserIdentiyProviderExternalId200>>(
    provider: string,
    externalId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/u/by-external/${provider}/${externalId}.json`,options
    );
  }

/**
 * @summary Update avatar
 */
const updateAvatar = <TData = AxiosResponse<UpdateAvatar200>>(
    username: string,
    updateAvatarBody: UpdateAvatarBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/u/${username}/preferences/avatar/pick.json`,
      updateAvatarBody,options
    );
  }

/**
 * @summary Update email
 */
const updateEmail = <TData = AxiosResponse<void>>(
    username: string,
    updateEmailBody: UpdateEmailBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/u/${username}/preferences/email.json`,
      updateEmailBody,options
    );
  }

/**
 * @summary Update username
 */
const updateUsername = <TData = AxiosResponse<void>>(
    username: string,
    updateUsernameBody: UpdateUsernameBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/u/${username}/preferences/username.json`,
      updateUsernameBody,options
    );
  }

/**
 * @summary Get a public list of users
 */
const listUsersPublic = <TData = AxiosResponse<ListUsersPublic200>>(
    params: ListUsersPublicParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/directory_items.json`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Get a user by id
 */
const adminGetUser = <TData = AxiosResponse<AdminGetUser200>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/admin/users/${id}.json`,options
    );
  }

/**
 * @summary Delete a user
 */
const deleteUser = <TData = AxiosResponse<DeleteUser200>>(
    id: number,
    deleteUserBody: DeleteUserBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/admin/users/${id}.json`,{data:
      deleteUserBody, ...options}
    );
  }

/**
 * @summary Activate a user
 */
const activateUser = <TData = AxiosResponse<ActivateUser200>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/admin/users/${id}/activate.json`,undefined,options
    );
  }

/**
 * @summary Deactivate a user
 */
const deactivateUser = <TData = AxiosResponse<DeactivateUser200>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/admin/users/${id}/deactivate.json`,undefined,options
    );
  }

/**
 * @summary Suspend a user
 */
const suspendUser = <TData = AxiosResponse<SuspendUser200>>(
    id: number,
    suspendUserBody: SuspendUserBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/admin/users/${id}/suspend.json`,
      suspendUserBody,options
    );
  }

/**
 * @summary Silence a user
 */
const silenceUser = <TData = AxiosResponse<SilenceUser200>>(
    id: number,
    silenceUserBody: SilenceUserBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/admin/users/${id}/silence.json`,
      silenceUserBody,options
    );
  }

/**
 * @summary Anonymize a user
 */
const anonymizeUser = <TData = AxiosResponse<AnonymizeUser200>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/admin/users/${id}/anonymize.json`,undefined,options
    );
  }

/**
 * @summary Log a user out
 */
const logOutUser = <TData = AxiosResponse<LogOutUser200>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/admin/users/${id}/log_out.json`,undefined,options
    );
  }

/**
 * @summary Refresh gravatar
 */
const refreshGravatar = <TData = AxiosResponse<RefreshGravatar200>>(
    username: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/user_avatar/${username}/refresh_gravatar.json`,undefined,options
    );
  }

/**
 * @summary Get a list of users
 */
const adminListUsers = <TData = AxiosResponse<AdminListUsers200Item[]>>(
    flag: 'active' | 'new' | 'staff' | 'suspended' | 'blocked' | 'suspect',
    params?: AdminListUsersParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/admin/users/list/${flag}.json`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Get a list of user actions
 */
const listUserActions = <TData = AxiosResponse<ListUserActions200>>(
    params: ListUserActionsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/user_actions.json`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Send password reset email
 */
const sendPasswordResetEmail = <TData = AxiosResponse<SendPasswordResetEmail200>>(
    sendPasswordResetEmailBody: SendPasswordResetEmailBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/session/forgot_password.json`,
      sendPasswordResetEmailBody,options
    );
  }

/**
 * @summary Change password
 */
const changePassword = <TData = AxiosResponse<void>>(
    token: string,
    changePasswordBody: ChangePasswordBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/users/password-reset/${token}.json`,
      changePasswordBody,options
    );
  }

/**
 * @summary Get email addresses belonging to a user
 */
const getUserEmails = <TData = AxiosResponse<GetUserEmails200>>(
    username: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/u/${username}/emails.json`,options
    );
  }

return {getBackups,createBackup,sendDownloadBackupEmail,downloadBackup,adminListBadges,createBadge,updateBadge,deleteBadge,createCategory,listCategories,updateCategory,listCategoryTopics,getCategory,createGroup,deleteGroup,updateGroup,getGroup,listGroupMembers,addGroupMembers,removeGroupMembers,listGroups,createInvite,createMultipleInvites,getNotifications,markNotificationsAsRead,listPosts,createTopicPostPM,getPost,updatePost,deletePost,postReplies,lockPost,performPostAction,listUserPrivateMessages,getUserSentPrivateMessages,search,getSite,getSiteBasicInfo,listTagGroups,createTagGroup,getTagGroup,updateTagGroup,listTags,getTag,getSpecificPostsFromTopic,getTopic,removeTopic,updateTopic,inviteToTopic,inviteGroupToTopic,bookmarkTopic,updateTopicStatus,listLatestTopics,listTopTopics,setNotificationLevel,updateTopicTimestamp,createTopicTimer,getTopicByExternalId,createUpload,generatePresignedPut,completeExternalUpload,createMultipartUpload,batchPresignMultipartParts,abortMultipart,completeMultipart,listUserBadges,createUser,getUser,updateUser,getUserExternalId,getUserIdentiyProviderExternalId,updateAvatar,updateEmail,updateUsername,listUsersPublic,adminGetUser,deleteUser,activateUser,deactivateUser,suspendUser,silenceUser,anonymizeUser,logOutUser,refreshGravatar,adminListUsers,listUserActions,sendPasswordResetEmail,changePassword,getUserEmails}};
export type GetBackupsResult = AxiosResponse<GetBackups200Item[]>
export type CreateBackupResult = AxiosResponse<CreateBackup200>
export type SendDownloadBackupEmailResult = AxiosResponse<void>
export type DownloadBackupResult = AxiosResponse<void>
export type AdminListBadgesResult = AxiosResponse<AdminListBadges200>
export type CreateBadgeResult = AxiosResponse<CreateBadge200>
export type UpdateBadgeResult = AxiosResponse<UpdateBadge200>
export type DeleteBadgeResult = AxiosResponse<void>
export type CreateCategoryResult = AxiosResponse<CreateCategory200>
export type ListCategoriesResult = AxiosResponse<ListCategories200>
export type UpdateCategoryResult = AxiosResponse<UpdateCategory200>
export type ListCategoryTopicsResult = AxiosResponse<ListCategoryTopics200>
export type GetCategoryResult = AxiosResponse<GetCategory200>
export type CreateGroupResult = AxiosResponse<CreateGroup200>
export type DeleteGroupResult = AxiosResponse<DeleteGroup200>
export type UpdateGroupResult = AxiosResponse<UpdateGroup200>
export type GetGroupResult = AxiosResponse<GetGroup200>
export type ListGroupMembersResult = AxiosResponse<ListGroupMembers200>
export type AddGroupMembersResult = AxiosResponse<AddGroupMembers200>
export type RemoveGroupMembersResult = AxiosResponse<RemoveGroupMembers200>
export type ListGroupsResult = AxiosResponse<ListGroups200>
export type CreateInviteResult = AxiosResponse<CreateInvite200>
export type CreateMultipleInvitesResult = AxiosResponse<CreateMultipleInvites200>
export type GetNotificationsResult = AxiosResponse<GetNotifications200>
export type MarkNotificationsAsReadResult = AxiosResponse<MarkNotificationsAsRead200>
export type ListPostsResult = AxiosResponse<ListPosts200>
export type CreateTopicPostPMResult = AxiosResponse<CreateTopicPostPM200>
export type GetPostResult = AxiosResponse<GetPost200>
export type UpdatePostResult = AxiosResponse<UpdatePost200>
export type DeletePostResult = AxiosResponse<void>
export type PostRepliesResult = AxiosResponse<PostReplies200Item[]>
export type LockPostResult = AxiosResponse<LockPost200>
export type PerformPostActionResult = AxiosResponse<PerformPostAction200>
export type ListUserPrivateMessagesResult = AxiosResponse<ListUserPrivateMessages200>
export type GetUserSentPrivateMessagesResult = AxiosResponse<GetUserSentPrivateMessages200>
export type SearchResult = AxiosResponse<Search200>
export type GetSiteResult = AxiosResponse<GetSite200>
export type GetSiteBasicInfoResult = AxiosResponse<GetSiteBasicInfo200>
export type ListTagGroupsResult = AxiosResponse<ListTagGroups200>
export type CreateTagGroupResult = AxiosResponse<CreateTagGroup200>
export type GetTagGroupResult = AxiosResponse<GetTagGroup200>
export type UpdateTagGroupResult = AxiosResponse<UpdateTagGroup200>
export type ListTagsResult = AxiosResponse<ListTags200>
export type GetTagResult = AxiosResponse<GetTag200>
export type GetSpecificPostsFromTopicResult = AxiosResponse<GetSpecificPostsFromTopic200>
export type GetTopicResult = AxiosResponse<GetTopic200>
export type RemoveTopicResult = AxiosResponse<void>
export type UpdateTopicResult = AxiosResponse<UpdateTopic200>
export type InviteToTopicResult = AxiosResponse<InviteToTopic200>
export type InviteGroupToTopicResult = AxiosResponse<InviteGroupToTopic200>
export type BookmarkTopicResult = AxiosResponse<void>
export type UpdateTopicStatusResult = AxiosResponse<UpdateTopicStatus200>
export type ListLatestTopicsResult = AxiosResponse<ListLatestTopics200>
export type ListTopTopicsResult = AxiosResponse<ListTopTopics200>
export type SetNotificationLevelResult = AxiosResponse<SetNotificationLevel200>
export type UpdateTopicTimestampResult = AxiosResponse<UpdateTopicTimestamp200>
export type CreateTopicTimerResult = AxiosResponse<CreateTopicTimer200>
export type GetTopicByExternalIdResult = AxiosResponse<unknown>
export type CreateUploadResult = AxiosResponse<CreateUpload200>
export type GeneratePresignedPutResult = AxiosResponse<GeneratePresignedPut200>
export type CompleteExternalUploadResult = AxiosResponse<CompleteExternalUpload200>
export type CreateMultipartUploadResult = AxiosResponse<CreateMultipartUpload200>
export type BatchPresignMultipartPartsResult = AxiosResponse<BatchPresignMultipartParts200>
export type AbortMultipartResult = AxiosResponse<AbortMultipart200>
export type CompleteMultipartResult = AxiosResponse<CompleteMultipart200>
export type ListUserBadgesResult = AxiosResponse<ListUserBadges200>
export type CreateUserResult = AxiosResponse<CreateUser200>
export type GetUserResult = AxiosResponse<GetUser200>
export type UpdateUserResult = AxiosResponse<UpdateUser200>
export type GetUserExternalIdResult = AxiosResponse<GetUserExternalId200>
export type GetUserIdentiyProviderExternalIdResult = AxiosResponse<GetUserIdentiyProviderExternalId200>
export type UpdateAvatarResult = AxiosResponse<UpdateAvatar200>
export type UpdateEmailResult = AxiosResponse<void>
export type UpdateUsernameResult = AxiosResponse<void>
export type ListUsersPublicResult = AxiosResponse<ListUsersPublic200>
export type AdminGetUserResult = AxiosResponse<AdminGetUser200>
export type DeleteUserResult = AxiosResponse<DeleteUser200>
export type ActivateUserResult = AxiosResponse<ActivateUser200>
export type DeactivateUserResult = AxiosResponse<DeactivateUser200>
export type SuspendUserResult = AxiosResponse<SuspendUser200>
export type SilenceUserResult = AxiosResponse<SilenceUser200>
export type AnonymizeUserResult = AxiosResponse<AnonymizeUser200>
export type LogOutUserResult = AxiosResponse<LogOutUser200>
export type RefreshGravatarResult = AxiosResponse<RefreshGravatar200>
export type AdminListUsersResult = AxiosResponse<AdminListUsers200Item[]>
export type ListUserActionsResult = AxiosResponse<ListUserActions200>
export type SendPasswordResetEmailResult = AxiosResponse<SendPasswordResetEmail200>
export type ChangePasswordResult = AxiosResponse<void>
export type GetUserEmailsResult = AxiosResponse<GetUserEmails200>
